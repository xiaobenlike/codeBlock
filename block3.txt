命名规范：
	//根据主键查询
	selectByPrimaryKey
	//查询分页数据
	selectList
	//插入
	insert/insertSelective
	//修改
	updateByPrimaryKey/updateByPrimaryKeySelective
	//根据主键删除
	deleteByPrimaryKey	
写作规范：
	图表相关写在 ReportController 中
.xml
	通用：
		<resultMap id="BaseResultMap" type="classPath" >
			<id column="ID" property="id" jdbcType="INTEGER" />
			<result column="propertyName" property="code" jdbcType="VARCHAR" />
		</resultMap>

		<!-- 默认过滤条件 -->
		<sql id="condition">
			<where>
				STATUS != xxxx
			</where>
		</sql>
		<!-- properties -->
		<sql id="Base_Column_List" >
	    	property_name1, property_name2,...
	  	</sql>
	时间：
		<if test="startTime != null" >
          <![CDATA[ and DATE_FORMAT(omn.END_TIME, '%Y-%m-%d') >= DATE_FORMAT(#{startTime}, '%Y-%m-%d') ]]>
      	</if>
    模糊查询
		<if test="name != null and name !=''" >
			and omn.NAME like concat('%',#{name},'%')
		</if>
	insert:
		<insert id="insertSelective" parameterType="classPath" >
			insert into table_name
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<if test="propertyName != null">
					property_name,
				</if>
			</trim>
			<trim prefix="values (" suffix=")" suffixOverrides="," >
				<if test="propertyName != null">
					#{property_name, jdbcType=INTEGER},
				</if>
			</trim>
		</insert>
	update:
		<update id="updateByPrimaryKeySelective" parameterType="classPath" >
			update table_name
			<set>
				<if test="propertyName != null" >
					property_name = #{propertyName,jdbcType=VARCHAR},
				</if>
			</set>
			where ID = #{id,jdbcType=INTEGER}
		</update>
	select:
		<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
		    select 
		    <include refid="Base_Column_List" />
		    from table_name table
		    left join table_name_1 table1 on table.xxx = table1.xxx
		    left join table_name_2 table2 on table.xxx = table2.xxx
		    where table.ID = #{id,jdbcType=INTEGER}
		</select>
	delete:
		<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
			delete from table_name
			where ID = #{id,jdbcType=INTEGER}
		</delete>	
jsp	
	顶部tab按钮：
		<div class="mb-5 pt-5">
            <button class="tabAll clickTab" onclick="postManage();" id="postManage">岗位信息管理</button>
            <button class="tabAll" onclick="postUserManage();" id="postUserManage">岗位人员管理</button>
        </div>
	查询条件：
		分行：
			<div class="searchDiv"></div>
		时间选择：
			<!--
				限制最大可选日期为当前时间
				WdatePicker({dateFmt:'yyyy-MM-dd',maxDate:'%y-%M-%d'})
			-->
			<div class="inputWidDiv inputWidDivBoms">
				<i class="startImg"></i>
				<input name="startTime" id="startTime" class="input-text size-M" onClick="WdatePicker({dateFmt:'yyyy-MM-dd'})" placeholder="请输入日期" readonly />
				<span class="joinSign">-</span>
			</div>
			<div class="inputWidDiv inputWidDivBoms ml-8">
				<i class="startImg"></i>
				<input name="endTime" id="endTime" class="input-text size-M" onClick="WdatePicker({dateFmt:'yyyy-MM-dd'})" placeholder="请输入日期" readonly/>
			</div>
		输入框：
			<label class="labeWidDiv">乙&emsp;&emsp;方</label>&ensp;:&ensp;
			<div class="inputWidDiv">
				<input type="text" name="partyB"
				   id="partyB" placeholder="请填写乙方"
				   class="input-text size-M" value="${contract.partyB}">
			</div>
		下拉选择：
			<label class="labeWidDiv">合同类型</label>&ensp;:&ensp;
        	<div class="inputWidDiv inputWidDivBom">
        		<select class="input-text size-M pthb" name="type" id="type">
					<option value="">===请选择===</option>
					<c:forEach items="${dic}" var="dic">
						<option value="${dic.id}"
							<c:if test="${dic.id eq contract.type}">selected</c:if>>${dic.value}</option>
					</c:forEach>
				</select>
				<div class="line-A"></div>
        	</div>
		功能按钮：
			<span class="spanSearchBtn">
				<button class="btn" type="button" onclick="query()">
					<i class="Hui-iconfont">&#xe665;</i> 查询
				</button>
					<a class="btn" href="javascript:;" onclick="contract_add('添加合同','<%=path %>/role/toAdd','800','400')"><i class="Hui-iconfont">&#xe600;</i> 添加</a>
					<a href="javascript:;" id="exportButton" style="padding-left:10px;" class="btn"><i class="Hui-iconfont">&#xe6e1;</i>导出</a>
			</span>

		弹框：
			$.MsgBox.Alert("温馨提示", "网络异常！");
			$.MsgBox.Confirm("温馨提示",'确认要删除吗？',function(){
				$.post("<%=basePath%>url",{data:data},function(){
					query();
				});
			});
		初始化数据表：
			let table = new rybtTableTree({
			    element: document.getElementById("tableMain"),
			    showCheckbox: false,
			    getPageListEvent: function (pageNum, pageSize) {
			        publicPage(pageNum, pageSize);
			    },
			    columns: [
			        {title: '项目名称', filedName: 'name', width: '20%'},
			        {title: '成果类型', filedName: 'typeName', width: '10%'},
			        {title: '获奖级别', filedName: 'lvName', width: '10%'},
			        {title: '主持负责人', filedName: 'firstName', width: '20%'},
			        {title: '执行负责人', filedName: 'implementName', width: '10%'},
			        {title: '参与完成人', filedName: 'joinName', width: '10%'},
			        {title: '项目完成时间', filedName: 'performanceDate', width: '10%',formatEvent:function (colData) {
		                return getDate(colData);
		            }},
			        {title: '操作', filedName: '', width: '10%', formatEvent: function (colData, rowData) {
			            return "<i class='upData' onclick='edit(" + rowData.id + ")' title='修改'></i>\n" +
							"<i class='delData' onclick='del(" + rowData.id + ")' title='删除'></i>\n";
			        }}
			    ]
			});
			table.init();
		查询数据：
			function publicPage(pageNum,pageSize){
			    showLoading();
			    $.post(url+"?pageNum="+pageNum+"&pageSize="+pageSize,$("#queryForm").serialize(),function (result) {
			        //绑定数据
			        table.bindData(result.list,result);
			    }).error(function (result) {
			        $.MsgBox.Alert("温馨提示", "网络异常！");
			    }).complete(function () {
			        removeLoading();
			    })
			}
		打开数据窗口：
			1.layer.js
				<script type="text/javascript" src="<%=basePath%>demo_static/common/lib/layer/2.4/layer.js"></script>
			2.打开：
				layer.open({
					type: 2,
					area:['780px','500px'],
					title: $.getTitle()[2],
					content: '请求url'
				});
			3.关闭：
				var index = parent.layer.getFrameIndex(window.name);
				parent.layer.close(index);
	add/edit:
		验证：
			jquery.validationEngine.js   在class中设置validate[xxxx]即可
			
			required			必需
			maxSize[100]		最多可输入多少个字符
			custom[number]		验证数字
			custom[integer]		验证整数
			需要联查数据库的验证
				1.ajax[funName]
				2.jquery.validationEngin-zh_CN.js中添加funName
				3.controller中进行验证并返回结果
					@ResponseBody
				    @RequestMapping(value="/checkBookNo")
				    public void  checkBookNo(String fieldValue, Integer id, HttpServletResponse response){
				        Book b = new Book();
				        b.setNo(fieldValue);
				        List<Book> list = bookService.select(b);
				        int length = list.size();
				        PrintWriter out;
				        try {
				            out = response.getWriter();
				            boolean flag = true;
				            //验证是否唯一
				            if(length > 0){
				                if(id == null){
				                    flag = false;
				                }else{
				                    if(list.get(0).getId() != id){
				                        flag = false;
				                    }
				                }
				            }
				            String[] result = new String[2];
				            if(flag) {
				                //唯一
				                result[0] = "no";
				                result[1] = "true";
				            }else {
				                //不唯一
				                result[0] = "no";
				                result[1] = "";
				            }
				            Gson gson = new Gson();
				            String str = gson.toJson(result);
				            out.print(str);
				            out.flush();
				            out.close();
				        } catch (IOException e) {
				            e.printStackTrace();
				        }
				    }
		分行：
			<div class="row"></div>
		单项：
			<div class="f-l">
	          <label class="wLabel text-r">是否公开</label>
	        </div>
	        <div class="f-l flex">
	         	<!-- select -->
	        	<div clas="f-l wInput">
		            <select class="input-text validate[required]"  id="documentPub" name="documentPub">
					<option value="">===请选择===</option>
					<option value="1">是</option>
					<option value="0">否</option>
					</select>
				</div>
				<!-- input -->
				<input type="text" class="input-text validate[maxSize[50],required]" id="title" name="title">
	        </div>
	        <div class="req-DW">
		          <span class="c-red">*</span>
	        </div>
	    人员选择弹框：
	    	1、<!-- 引入选择人员js -->
			script type="text/javascript" src="<%=basePath%>demo_static/common/commonUserJs/commonUserSelect.js"></script>
			2、
			<-- 
				多选:selectCheckBoxCommonUser
				单选：selectRadioCommonUser
			-->
	    	<div class="f-l flex">
	        	<div class="f-l wInput pos-r">
		          <input type="hidden" id="personnel2">
				  <input type="text" maxlength="150" class="input-text validate[maxSize[100],required] pr-30" name="personnel" id="personnel" readonly="readonly">
		          <span title="选择人员" class="xzPeople" onclick="selectCheckBoxCommonUser('存储选择结果中id的ele','存储选择结果中name的ele','选择完成的回调')"></span>
	        	</div>
	        </div>
		时间格式化：
			value="<fmt:formatDate value="${fellowship.activityTime }" pattern="yyyy-MM-dd" type="date"/>"
		ueditor:
			<script type="text/javascript" src="<%=basePath%>demo_static/common/lib/ueditor/1.4.3/ueditor.config.js"></script>
			<script type="text/javascript" src="<%=basePath%>demo_static/common/lib/ueditor/1.4.3/ueditor.all.js"> </script>
			<script type="text/javascript" src="<%=basePath%>demo_static/common/lib/ueditor/1.4.3/ueditor_custom.js"> </script>
			createEditor("content");
		文件上传：
			1.
			<link rel="stylesheet" type="text/css" href="<%=basePath%>newBlueBg_static/controls/webuploader/0.1.5/webuploader.css">
			<script src="<%=basePath%>newBlueBg_static/controls/webuploader/0.1.5/webuploader.nolog.js" type="text/javascript" ></script>
			<script src="<%=basePath%>newBlueBg_static/controls/webuploader/upload.js" type="text/javascript" ></script>
			2.uploader.loadingFiles( eval('('+ '${attaList}' +')'));
			3.<div id="" class="f-l pos-r  fileContainer"></div>
	content:
		设置背景为灰色不可用：添加一个class即可，hbp
		其他操作：
			input readonly
			select disabled
controller:
	调用sqlserver库？
		CustomerContextHolder.setCustomerType(CustomerContextHolder.DATA_SOURCE_MYSQL);
	得到登录信息:
		UserInfo ui = new UserInfo();
		Integer userId = ui.getUserId(request);
	新增后跳转到指定页面：
		return "redirect:list";
	获得分页数据:
			1)controller
			@ResponseBody
			@RequestMapping(value="/toList", method ={RequestMethod.POST,RequestMethod.GET})
			public PageInfo<Institution> toList(Bean bean,
										   @RequestParam(value = "pageNum", defaultValue = "") String pageNum,
										   @RequestParam(value = "pageSize", defaultValue = "") String pageSize){
				List<Bean> list = xxService.selectList(bean, pageNum, pageSize);
				PageInfo<Bean> page = new PageInfo<Bean>(list); //将list转换为分页方法
				return page;
			}
			2)service
			public List<Bean> selectList(Bean bean, String pageNum,
										 String pageSize) {
				mybatisPage page = new mybatisPage();
		    	page.PageInfo(pageNum, pageSize);
		    	List<Bean> list = documentMapper.selectList(bean);
		        return documentList;
			}
	携带数据跳转页面：
		@RequestMapping(value="/toAdd")
		public ModelAndView toAdd(){
			ModelAndView model = new ModelAndView("url");
			//字典表获取制度类型
			List<Bean> list = xxService.selectListbyIdAPI(xxx);
			model.addObject("list", list);
			return model;
		}
model:
	date类型数据（springMVC无法自动匹配date类型）：
		@DateTimeFormat(pattern="yyyy-MM-dd")
		private Date propertyName;

组合类：
	统计：
		controller
			/**
		     * 按xx统计xx
		     * @return
		     */
		    @ResponseBody
		    @RequestMapping(value = "/getXxxReportByXxx", method = {RequestMethod.POST, RequestMethod.GET})
		    public List<Map<String, Object>> getXxxReportByXxx(){
		        List<Map<String, Object>> result = reportService.getXxxReportByXxx();
		        return result;
		    }
		xml
		  <!-- 按xx统计xx -->
		  <select id="getXxxReportByXxx"   resultType="map" useCache="false">
		      status >= 0
		  </select>
	excel导出：
		controller:
			@RequestMapping("export")
			public void export(PartyMemberTemp partyMemberTemp, HttpServletResponse response) throws IOException {
				HSSFWorkbook wb = partyMemberServcie.export(partyMemberTemp);
				//输出Excel文件
				OutputStream output = response.getOutputStream();
				response.reset();
				//设置文件名
				String fileName = "党员信息" + System.currentTimeMillis() + ".xls";
				//字符集
				String newFileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
				response.setHeader("Content-disposition", "attachment; filename=" + newFileName);
				response.setContentType("application/msexcel");
				wb.write(output);
				output.close();
			}
		service:
			HSSFWorkbook export(Asset asset);
		serviceImpl:
			public HSSFWorkbook export(Asset asset) {
		        //创建HSSFWorkbook对象(excel的文档对象)
		        HSSFWorkbook wb = new HSSFWorkbook();

		        //创建HSSFSheet对象(excel  页对象)
		        HSSFSheet sheet1 = wb.createSheet("sheet1");//参数是页签sheet的名字
		        //创建第二行   表头行
		        HSSFRow headRow = sheet1.createRow(0);
		        //创建表头行的单元格   设置单元格内容
		        HSSFCell headRowCell = headRow.createCell(0);
		        headRowCell.setCellValue("资产编号");

		        headRowCell = headRow.createCell(1);
		        headRowCell.setCellValue("资产名称");

		        //excel文件正式内容
		        //查询科技查新列表
		        List<Asset> assetList = assetMapper.select(asset);
		        //创建内容行
		        HSSFRow contentRow = null;
		        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		        if (assetList.size() != 0) {
		            for (int i = 0; i < assetList.size(); i++) {
		                //创建一行
		                contentRow = sheet1.createRow(i + 1);

		                Asset c = assetList.get(i);

		                HSSFCell contentRowCell = contentRow.createCell(0);
		                contentRowCell.setCellValue(c.getNo());

		                contentRowCell = contentRow.createCell(1);
		                contentRowCell.setCellValue(c.getName());
		            }
		        }
		        return wb;
		    }


zTree:
	选中第一个节点：
		$(function () {
		    var setting = {
		        //check属性放在data属性之后，复选框不起作用
		        //check: {
		        //    enable: true
		        //},
		        data: {
		            simpleData: {
		                enable: true
		            },
		        },
		        view: {
		            showIcon: false
		 
		        },
		        callback: {
		            onClick: roleClick
		        }
		    };
		    //加载所有角色
		    $.ajax({
		        url: "/Role/GetRole",
		        type: "get",
		        success: function (data)
		        {
		            var roletree = $.fn.zTree.init($("#roletree"), setting, data);
		            var node = roletree.getNodes()[0];
		            roletree.selectNode(node);
		            setting.callback.onClick(null, roletree.setting.treeId, node);

		            /*
		            	选中第一个叶子
		            	var nodes = zTreeObj.getNodes(),
							node;
						while(nodes && nodes.constructor == Array && nodes.length){
							node = nodes[0];
							nodes = nodes[0].children;
						}
						if(node){
							zTreeObj.selectNode(node);
							setting.callback.onClick(null, zTreeObj.setting.treeId, node);
						}

		            */
		 
		        }
		    });
		});


项目总结：
	规范类：
		命名不统一
		status值不统一
		业务逻辑和制式的判断加在哪里？controller、service
		service有的有impl，有的没有impl?
	js整理归纳：
		getDate()   转换时间戳为固定格式
		联查过程中status的限制
